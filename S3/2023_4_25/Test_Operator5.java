public class Test_Operator5 {
    public static void main(String[]args){
        //移位运算符有三个: << >> >>> ，都是二元运算符，且都是按照二进制比特位来运算的。

        //1. 左移 <<
        //最左侧位不要了, 最右侧补 0.
/*
        int a = 0x10;
        System.out.printf("%x\n", a << 1);
        // 运行结果 20(注意, 是按十六进制打印的)
*/
        //注意：向左移位时，丢弃的是符号位，因此正数左移可能会编程负数。

        //2. 右移 >>
        //最右侧位不要了, 最左侧补符号位(正数补0, 负数补1)
/*
        int a = 0x10;
        System.out.printf("%x\n", a >> 1);
        // 运行结果 8 (注意, 是按十六进制打印的)
        int b = 0xffff0000;
        System.out.printf("%x\n", b >> 1);
        // 运行结果 ffff8000 (注意, 是按十六进制打印的)
*/
        //3. 无符号右移 >>>
        //最右侧位不要了, 最左侧补 0.
/*
        int a = 0xffffffff;
        System.out.printf("%x\n", a >>> 1);
        // 运行结果7ffffff(注意, 是按十六进制打印的)
*/

//    1. 左移 1 位, 相当于原数字 * 2. 左移 N 位, 相当于原数字 * 2 的N次方.
//    2. 右移 1 位, 相当于原数字 / 2. 右移 N 位, 相当于原数字 / 2 的N次方.
//    3. 由于计算机计算移位效率高于计算乘除, 当某个代码正好乘除 2 的N次方的时候可以用移位运算代替.
//    4. 移动负数位或者移位位数过大都没有意义.



    }
}
